using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Text;

namespace RpcProxyGenerator
{
    // this generates client proxy and server wrapper classes based on passed-in interface assembly and interface name
    // methods are assumed to be async, ie never receive results
    public class NetworkProxyBuilder
    {
        byte[] ReadFile(String filename)
        {
            FileStream fs = new FileStream(filename, FileMode.Open);
            BinaryReader br = new BinaryReader(fs);
            Byte[] bytes = br.ReadBytes((int)fs.Length);
            br.Close();
            return bytes;
        }

        StreamWriter clientproxy;
        StreamWriter serverproxy;
        Type targettype;
        string serverclassname;

        void WriteHeaderComments(StreamWriter sw)
        {
            sw.WriteLine("// *** This is a generated file; if you want to change it, please change the generator or the appropriate interface file");
            sw.WriteLine("// ");
            sw.WriteLine("// This file was generated by NetworkProxyBuilder, by Hugh Perkins hughperkins@gmail.com http://manageddreams.com");
            sw.WriteLine("// ");
            sw.WriteLine("");
        }

        void WriteMethod(MethodInfo methodinfo)
        {
            //client first
            // pattern for client:
            // public void methodname( type1 arg1, type2 arg2, type3 arg3, ... )
            //{
            //    rpc.SendRpcToRemoteClient( connection, "serverwrappername", "methodname", new object[]{ arg1, arg2, arg3 ... } );
            //}
            // note: all methods return void, since they are async
            string incomingparametersstring = "";
            string outgoingparametersstring = "";
            bool isfirstparam = true;
            foreach( ParameterInfo parameterinfo in methodinfo.GetParameters() )
            {
                if (!isfirstparam)
                {
                    incomingparametersstring += ", ";
                    outgoingparametersstring += ", ";
                }
                isfirstparam = false;
                incomingparametersstring += parameterinfo.ParameterType.ToString() + " " + parameterinfo.Name;
                outgoingparametersstring += parameterinfo.Name;
            }
            clientproxy.WriteLine("   public void " + methodinfo.Name + "( " + incomingparametersstring + " )" );
            clientproxy.WriteLine("   {");
            clientproxy.WriteLine("      rpc.SendRpc( connection, \"" + targettypename + "\", \"" + methodinfo.Name + "\", " +
                " new object[]{ " + outgoingparametersstring + " } );" );
            clientproxy.WriteLine("   }");

            //server
            // pattern for server
            // public void methodname( Connection connection, object[] parameters )
            //{
            //    new classname( connection ).methodname( (type1)parameters[0], (type2)parameters[1] ... );
            //}
            // where classname is name of class, and connection allows target method to determine the sending client
            // note: all methods return void, since they are async
            //outgoingparametersstring = "";
            //isfirstparam = true;
            //int parameterindex = 0;
            //foreach (ParameterInfo parameterinfo in methodinfo.GetParameters())
            //{
                //if (!isfirstparam)
                //{
                    //outgoingparametersstring += ", ";
                //}
                //isfirstparam = false;
                //outgoingparametersstring += "( " + parameterinfo.ParameterType.ToString() + " )parameters[" + parameterindex + "]";
              //  parameterindex++;
            //}
            //serverproxy.WriteLine("   public void " + methodinfo.Name + "( object[] parameters )");
            //serverproxy.WriteLine("   {");
            //serverproxy.WriteLine("      new " + serverclassname + "( connection )." + methodinfo.Name + "( " +
                //outgoingparametersstring + " );");
          //  serverproxy.WriteLine("   }");
        }

        string targettypename;
        string namespacename;
        string interfacename;
        //string serverwrapperfullname;

        public void Go(string assemblyfilepath, string namespacename, string interfacename)
        {
            this.namespacename = namespacename;
            this.interfacename = interfacename;
            if (namespacename.Trim() != "")
            {
                this.targettypename = namespacename + "." + interfacename;
            }
            else
            {
                this.targettypename = interfacename;
            }
            byte[] assemblybytes = ReadFile(assemblyfilepath);
            Assembly assembly = Assembly.Load(assemblybytes);
            targettype = assembly.GetType(targettypename);
            if (targettype == null)
            {
                Console.WriteLine("Couldnt find type " + targettypename );
                return;
            }

            serverclassname = interfacename.Substring(1);

            string clientproxyclassname = serverclassname + "_ClientProxy";
            //string serverwrapperclassname = serverclassname + "_ServerWrapper";

            //if (namespacename == "")
            //{
              //  serverwrapperfullname = serverwrapperclassname;
            //}
            //else
            //{
                //serverwrapperfullname = namespacename + "." + serverwrapperclassname;
            //}

            string clientproxyfilepath = clientproxyclassname + "_Generated.cs";
            //string serverwrapperfilepath = serverwrapperclassname + "_Generated.cs";

            Console.WriteLine("We will create proxy classes that will run methods on class " + serverclassname + " on the server");
            Console.WriteLine("Server class will need to have constructor with parameters ( Connection connection )");

            clientproxy = new StreamWriter(clientproxyfilepath, false);
            //serverproxy = new StreamWriter(serverwrapperfilepath, false);

            WriteHeaderComments(clientproxy);
            //WriteHeaderComments(serverproxy);

            clientproxy.WriteLine("using System;");
            clientproxy.WriteLine("using System.Net;");
            clientproxy.WriteLine();

            // client implements interface, server cannot because will accept array of objects as parameters
            if (namespacename != "")
            {
                clientproxy.WriteLine("namespace " + namespacename);
                clientproxy.WriteLine("{");
            }
            clientproxy.WriteLine("public class " + clientproxyclassname + " : " + targettypename);
            clientproxy.WriteLine("{");
            clientproxy.WriteLine("   RpcController rpc;");
            clientproxy.WriteLine("   IPEndPoint connection;");
            clientproxy.WriteLine("");
            clientproxy.WriteLine("   public " + clientproxyclassname + "( RpcController rpc, IPEndPoint connection )");
            clientproxy.WriteLine("   {");
            clientproxy.WriteLine("      this.rpc = rpc;");
            clientproxy.WriteLine("      this.connection = connection;");
            clientproxy.WriteLine("   }");

            //if (namespacename != "")
            //{
             //   serverproxy.WriteLine("namespace " + namespacename);
              //  serverproxy.WriteLine("{");
            //}
            //serverproxy.WriteLine("public class " + serverwrapperclassname);
            //serverproxy.WriteLine("{");
            //serverproxy.WriteLine("   object connection;");
            //serverproxy.WriteLine("");
            //serverproxy.WriteLine("   public " + serverwrapperclassname + "( object connection )");
            //serverproxy.WriteLine("   {");
            //serverproxy.WriteLine("      this.connection = connection;");
            //serverproxy.WriteLine("   }");

            foreach (MethodInfo methodinfo in targettype.GetMethods())
            {
                WriteMethod(methodinfo);
            }

            clientproxy.WriteLine("}");
            //serverproxy.WriteLine("}");
            if (namespacename != "")
            {
                clientproxy.WriteLine("}");
              //  serverproxy.WriteLine("}");
            }

            clientproxy.Close();
            //serverproxy.Close();

            Console.WriteLine("");
            Console.WriteLine(clientproxyfilepath + " generated");
        }
    }
}
